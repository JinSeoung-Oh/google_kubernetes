## basic example of GCK (just code)
Enter google cloud shell


docker run hello-world (RUN CONATINER)
docker images          (VIEW CONTAINER IMAGE)
docker ps              (VIEW RUNNING CONTAINERS)
docker ps -a           (VIEW ALL RUNNING CONTAINERS)


# START
mkdir test && cd test  (MAKE DIR)


(CREATE A DOCKERFILE)
cat > Dockerfile <<EOF                          <-- or vi Dockerfile
FROM node:lts
WORKDIR /app
ADD . /app
EXPOSE 80
CMD ["node", "app.js"]
EOF                                            <-- with vi, delete this line


(CREATE A APP.JS FILE)
cat > app.js <<EOF                             <-- or vi app.js
const http = require('http');
const hostname = '0.0.0.0';
const port = 80;
const server = http.createServer((req, res) => {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/plain');
    res.end('Hello World\n');
});
server.listen(port, hostname, () => {
    console.log('Server running at http://%s:%s/', hostname, port);
});
process.on('SIGINT', function() {
    console.log('Caught interrupt signal and will exit');
    process.exit();
});
EOF                                          <-- with vi, delete this line


(BUILD)
docker build -t node-app:0.1 .
docker images (CHECK)


(RUN CONTAINER)
docker run -p 4000:80 --name my-app node-app:0.1
curl http://localhost:4000 (CHECK RUN)


(STOP)
docker stop my-app && docker rm my-app

docker run -p 4000:80 --name my-app -d node-app:0.1
docker ps


(VIEW DOCKER LOG)
docker logs [container_id]


(DEBUG)
docker logs -f [container_id]
docker exec -it [container_id] bash
docker inspect [container_id]              (examine a container's metadata in Docker by using Docker inspect)

docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' [container_id]         -->  output : 192.xxx.x.x
(Use --format to inspect specific fields from the returned JSON)


(PUBLISH)
create the target docker repository

gcloud auth configure-docker us-central1-docker.pkg.dev
export PROJECT_ID=$(gcloud config get-value project)
cd ~/test
docker build -t us-central1-docker.pkg.dev/$PROJECT_ID/my-repository/node-app:0.2 .

docker images
docker push us-central1-docker.pkg.dev/$PROJECT_ID/my-repository/node-app:0.2


(TEST)
REMOVE ALL
docker stop $(docker ps -q)
docker rm $(docker ps -aq)
docker rmi us-central1-docker.pkg.dev/$PROJECT_ID/my-repository/node-app:0.2
docker rmi node:lts
docker rmi -f $(docker images -aq) # remove remaining images
docker images


PULL THE IMAGE AND RUN IT
docker pull us-central1-docker.pkg.dev/$PROJECT_ID/my-repository/node-app:0.2
docker run -p 4000:80 -d us-central1-docker.pkg.dev/$PROJECT_ID/my-repository/node-app:0.2
curl http://localhost:4000

