##  Kubernetes - a powerful cluster manager and orchestration system for containers. 
Kubernetes is an open source project that can run on many different environmentsâ€”from laptops to high-availability multi-node clusters; 
from virtual machines to bare metal. As mentioned before, Kubernetes apps are built on containers


##  Jenkins is an open-source automation server that lets you flexibly orchestrate your build, test, and deployment pipelines

## Just code
## Enter google cloud conslo
## Check gceme (Application)


Downloads the source code
gcloud config set compute/zone us-central1-a
gsutil cp gs://spls/gsp051/continuous-deployment-on-kubernetes.zip .
unzip continuous-deployment-on-kubernetes.zip
cd continuous-deployment-on-kubernetes


## Provisioning Jenkins
1. Creating a Kubernetes cluster
gcloud container clusters create jenkins-cd \
--num-nodes 2 \
--machine-type n1-standard-2 \
--scopes "https://www.googleapis.com/auth/source.read_write,cloud-platform"

gcloud container clusters list
gcloud container clusters get-credentials jenkins-cd
kubectl cluster-info


## Setup Helm
helm repo add jenkins https://charts.jenkins.io
helm repo update


## configure and install jenkins
helm install cd jenkins/jenkins -f jenkins/values.yaml --wait
kubectl get pods
# Configure the Jenkins service account to be able to deploy to the cluster
kubectl create clusterrolebinding jenkins-deploy --clusterrole=cluster-admin --serviceaccount=default:cd-jenkins

export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/component=jenkins-master" -l "app.kubernetes.io/instance=cd" -o jsonpath="{.items[0].metadata.name}")
kubectl port-forward $POD_NAME 8080:8080 >> /dev/null &
kubectl get svc


##  Connect to Jenkins
printf $(kubectl get secret cd-jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo


##  Deploying Application
cd sample-app
kubectl create ns production
kubectl apply -f k8s/production -n production
kubectl apply -f k8s/canary -n production
kubectl apply -f k8s/services -n production


kubectl scale deployment gceme-frontend-production -n production --replicas 4
kubectl get pods -n production -l app=gceme -l role=frontend
kubectl get pods -n production -l app=gceme -l role=backend
kubectl get service gceme-frontend -n production


# store fronted service with load balancer
export FRONTEND_SERVICE_IP=$(kubectl get -o jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
curl http://$FRONTEND_SERVICE_IP/version


##  Create the jenkins pipeline
gcloud source repos create default
git init
git config credential.helper gcloud.sh
git remote add origin https://source.developers.google.com/p/$DEVSHELL_PROJECT_ID/r/default
git config --global user.email "[EMAIL_ADDRESS]"
git config --global user.name "[USERNAME]"
git add .
git commit -m "Initial commit"
git push origin master


##  Adding your service account credentials
1. In the Jenkins user interface, click Manage Jenkins in the left navigation then click Manage Credentials.
2. Click System.
3. Click Global credentials (unrestricted) and add Credentials in the top right corner.
4. Select Google Service Account from metadata from the Kind drop-down and click Create.


##  Configure Jenkins Cloud for Kubernetes
1. In the Jenkins user interface, select Manage Jenkins > Manage nodes and clouds.
2. Click Configure Clouds in the left navigation pane and click Add a new cloud and select Kubernetes.
3. Click Kubernetes Cloud Details.
4. In the Jenkins URL field, enter the following value: http://cd-jenkins:8080
5. In the Jenkins tunnel field, enter the following value: cd-jenkins-agent:50000


##  Creating the Jenkins Job
1. Click Dashboard > New Item in the left panel.
2. Name the project sample-app, then choose the Multibranch Pipeline option and click OK.
3. On the next page, in the Branch Sources section, select Git from Add Source dropdown.
4. Paste the HTTPS clone URL of your sample-app repo in Cloud Source Repositories into the Project Repository field. Replace [PROJECT_ID] with your Project ID:
5. https://source.developers.google.com/p/[PROJECT_ID]/r/default
6. From the Credentials drop-down, select the name of the credentials you created when adding your service account in the previous steps.
7. Under Scan Multibranch Pipeline Triggers section, check the Periodically if not otherwise run box and set the Interval value to 1 minute.

##  Creating the devleopment environment
git checkout -b new-feature (development branch)


##  Kick off Depolyment
git add Jenkinsfile html.go main.go
git commit -m "Version 2.0.0"
git push origin new-feature

kubectl proxy &
curl \
http://localhost:8001/api/v1/namespaces/new-feature/services/gceme-frontend:80/proxy/version


## Deploying a canary release
git checkout -b canary
git push origin canary
export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done


## Depolying to production
git checkout master
git merge canary
git push origin master
export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done
kubectl get service gceme-frontend -n production
